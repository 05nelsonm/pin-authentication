{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PinAuthentication \u00b6 An Android library that provides local PIN authentication for your application. When your application is brought to the foreground, PinAuthentication will check if authentication is required. If so, it will automatically launch an Activity requiring the user to enter their PIN. A correct PIN will remove the Authentication Activity and return to the prior Activity for which it was started from. Get started! \u00b6 Other Projects Using It \u00b6 Info Add your project to the list by submitting a PR! Edit This Document License \u00b6 Copyright \u00a9 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here .","title":"Overview"},{"location":"#pinauthentication","text":"An Android library that provides local PIN authentication for your application. When your application is brought to the foreground, PinAuthentication will check if authentication is required. If so, it will automatically launch an Activity requiring the user to enter their PIN. A correct PIN will remove the Authentication Activity and return to the prior Activity for which it was started from.","title":"PinAuthentication "},{"location":"#get-started","text":"","title":"Get started!"},{"location":"#other-projects-using-it","text":"Info Add your project to the list by submitting a PR! Edit This Document","title":"Other Projects Using It"},{"location":"#license","text":"Copyright \u00a9 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here .","title":"License "},{"location":"changelog/","text":"Change Log \u00b6 Version 1.0.0-beta01 (2020-06-05) \u00b6 BugFix: Fix protectUserData method to only clear pinEntry.pin [2a60e95] Add internal modifier to all classes not needing to be public [cbf9682] Remove PA prefix from all non-annotation type classes [69e060c] Version 1.0.0-alpha02 (2020-06-02) \u00b6 BugFix: Reset PIN feature was clearing the pinEntryCompare variable if user was logged out [10801d3] BugFix: Reset PIN feature was checking if variable was initialized instead of if it was empty [e54e137] Updated Sonatype repo GroupID to resolve SNAPSHOT conflicts and match package name Version 1.0.0-alpha01 (2020-05-30) \u00b6 Initial Release","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-100-beta01-2020-06-05","text":"BugFix: Fix protectUserData method to only clear pinEntry.pin [2a60e95] Add internal modifier to all classes not needing to be public [cbf9682] Remove PA prefix from all non-annotation type classes [69e060c]","title":"Version 1.0.0-beta01 (2020-06-05)"},{"location":"changelog/#version-100-alpha02-2020-06-02","text":"BugFix: Reset PIN feature was clearing the pinEntryCompare variable if user was logged out [10801d3] BugFix: Reset PIN feature was checking if variable was initialized instead of if it was empty [e54e137] Updated Sonatype repo GroupID to resolve SNAPSHOT conflicts and match package name","title":"Version 1.0.0-alpha02 (2020-06-02)"},{"location":"changelog/#version-100-alpha01-2020-05-30","text":"Initial Release","title":"Version 1.0.0-alpha01 (2020-05-30)"},{"location":"get_started/","text":"Get Started \u00b6 Requirements \u00b6 Minimum API 23 Implementation \u00b6 In your App module\u2019s build.gradle file, add the following to the android block: buildFeatures . dataBinding = true In your App module\u2019s build.gradle file, add the following to the dependencies block: implementation 'io.matthewnelson.pin-authentication:pin-authentication:1.0.0-beta01' In your Application class\u2019 onCreate , implement the following Builder and customize it as desired: PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) . setCustomColors () . set1_BackspaceButtonImageColor ( R . color . pa_white ) . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set3_ConfirmButtonImageColor ( R . color . pa_white ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set5_PinHintImageColor ( R . color . pa_white ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set7_PinResetInfoImageColor ( R . color . pa_white ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . set9_TextColor ( R . color . pa_white ) . applyColors () !! . build () Info The above Builder contains all available options. More info can be found here about each individual option. Using the SNAPSHOT version \u00b6 In your Project\u2019s build.gradle file, add the following to the repositories block: mavenCentral () maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } In your App module\u2019s build.gradle file, add (or modify) the following in the dependencies block: implementation 'io.matthewnelson.pin-authentication:pin-authentication:1.0.0-beta02-SNAPSHOT' Warning SNAPSHOT versions are ever changing and may contain not yet fully fleshed out features. Do not ship a release.","title":"Get Started"},{"location":"get_started/#get-started","text":"","title":"Get Started"},{"location":"get_started/#requirements","text":"Minimum API 23","title":"Requirements"},{"location":"get_started/#implementation","text":"In your App module\u2019s build.gradle file, add the following to the android block: buildFeatures . dataBinding = true In your App module\u2019s build.gradle file, add the following to the dependencies block: implementation 'io.matthewnelson.pin-authentication:pin-authentication:1.0.0-beta01' In your Application class\u2019 onCreate , implement the following Builder and customize it as desired: PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) . setCustomColors () . set1_BackspaceButtonImageColor ( R . color . pa_white ) . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set3_ConfirmButtonImageColor ( R . color . pa_white ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set5_PinHintImageColor ( R . color . pa_white ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set7_PinResetInfoImageColor ( R . color . pa_white ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . set9_TextColor ( R . color . pa_white ) . applyColors () !! . build () Info The above Builder contains all available options. More info can be found here about each individual option.","title":"Implementation"},{"location":"get_started/#using-the-snapshot-version","text":"In your Project\u2019s build.gradle file, add the following to the repositories block: mavenCentral () maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } In your App module\u2019s build.gradle file, add (or modify) the following in the dependencies block: implementation 'io.matthewnelson.pin-authentication:pin-authentication:1.0.0-beta02-SNAPSHOT' Warning SNAPSHOT versions are ever changing and may contain not yet fully fleshed out features. Do not ship a release.","title":"Using the SNAPSHOT version"},{"location":"releasing/","text":"Releasing PinAuthentication \u00b6 Create a local release branch from master git checkout master git pull git checkout -b release_1.0.0-beta02 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=1.0.0-beta02 Update the current version and next version in mkdocs.yml extra: pin_authentication: release: '1.0.0-beta02' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/pin-authentication ./gradlew pin-authentication:dokka Update the Demo App if changes were made to documentation in the PinAuthentication class: scripts/comments_to_string_resource.sh && gedit scripts/output.txt scripts/output.bak.txt demo/src/main/res/values/strings.xml Tweak the strings to 45-50 characters per line & add headers ex: \\n//////////// Listeners ////////////\\n Copy/Paste new strings into demo/src/main/res/values/strings.xml resource file fields text_view_settings_features text_view_controller_features Save files Delete output.bak.txt rm -rf scripts/output.bak.txt Update docs/changelog.md after checking out all changes: compare changes Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 1.0.0-beta02 release\" Perform a clean build ./gradlew clean ./gradlew build Sign the Demo App release apk scripts/sign_demo_release_build.sh Install the Demo App\u2019s release.apk and ensure it works properly. Create a PGP signed tag, and push it git tag -s 1.0.0-beta02 -m \"Release v1.0.0-beta02\" git push origin 1.0.0-beta02 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_1.0.0-beta02 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy exit Go to the Draft a new release page, enter the release name (1.0.0-beta02) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. Upload the demo-release-signed.apk to assets Release the Demo App to the Play Store","title":"Releasing"},{"location":"releasing/#releasing-pinauthentication","text":"Create a local release branch from master git checkout master git pull git checkout -b release_1.0.0-beta02 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=1.0.0-beta02 Update the current version and next version in mkdocs.yml extra: pin_authentication: release: '1.0.0-beta02' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/pin-authentication ./gradlew pin-authentication:dokka Update the Demo App if changes were made to documentation in the PinAuthentication class: scripts/comments_to_string_resource.sh && gedit scripts/output.txt scripts/output.bak.txt demo/src/main/res/values/strings.xml Tweak the strings to 45-50 characters per line & add headers ex: \\n//////////// Listeners ////////////\\n Copy/Paste new strings into demo/src/main/res/values/strings.xml resource file fields text_view_settings_features text_view_controller_features Save files Delete output.bak.txt rm -rf scripts/output.bak.txt Update docs/changelog.md after checking out all changes: compare changes Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 1.0.0-beta02 release\" Perform a clean build ./gradlew clean ./gradlew build Sign the Demo App release apk scripts/sign_demo_release_build.sh Install the Demo App\u2019s release.apk and ensure it works properly. Create a PGP signed tag, and push it git tag -s 1.0.0-beta02 -m \"Release v1.0.0-beta02\" git push origin 1.0.0-beta02 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_1.0.0-beta02 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy exit Go to the Draft a new release page, enter the release name (1.0.0-beta02) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. Upload the demo-release-signed.apk to assets Release the Demo App to the Play Store","title":"Releasing PinAuthentication"},{"location":"pin-authentication/","text":"pin-authentication Packages \u00b6 Name Summary io.matthewnelson.pin_authentication.service Index \u00b6 All Types","title":"Index"},{"location":"pin-authentication/#packages","text":"Name Summary io.matthewnelson.pin_authentication.service","title":"Packages"},{"location":"pin-authentication/#index","text":"All Types","title":"Index"},{"location":"pin-authentication/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.pin_authentication.service.PinAuthentication \u00b6","title":"Index"},{"location":"pin-authentication/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"pin-authentication/alltypes/#iomatthewnelsonpin_authenticationservicepinauthentication","text":"","title":"io.matthewnelson.pin_authentication.service.PinAuthentication"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/","text":"pin-authentication / io.matthewnelson.pin_authentication.service Package io.matthewnelson.pin_authentication.service \u00b6 Types \u00b6 Name Summary PinAuthentication sealed class PinAuthentication","title":"Index"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/#package-iomatthewnelsonpin_authenticationservice","text":"","title":"Package io.matthewnelson.pin_authentication.service"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/#types","text":"Name Summary PinAuthentication sealed class PinAuthentication","title":"Types"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication PinAuthentication \u00b6 sealed class PinAuthentication (source) Types \u00b6 Name Summary Builder Call from the Application\u2019s onCreate() to implement class Builder Controller PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features. class Controller Settings PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings. class Settings","title":"Index"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/#pinauthentication","text":"sealed class PinAuthentication (source)","title":"PinAuthentication"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/#types","text":"Name Summary Builder Call from the Application\u2019s onCreate() to implement class Builder Controller PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features. class Controller Settings PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings. class Settings","title":"Types"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder Builder \u00b6 class Builder (source) Call from the Application\u2019s onCreate() to implement PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build () Types \u00b6 Name Summary ColorsBuilder Customize PinAuthenticationActivity \u2018s colors. class ColorsBuilder OptionsBuilder Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. class OptionsBuilder Constructors \u00b6 Name Summary <init> Call from the Application\u2019s onCreate() to implement Builder() Functions \u00b6 Name Summary setApplicationAndBuildConfig Sets the Application which is used throughout PinAuthentication . It initializes PinAuthentication \u2018s DaggerApplicationComponent which then is used to inject classes as needed. See CompanionInjection See Companion.injected fun setApplicationAndBuildConfig(application: Application , buildConfigDebug: Boolean ): OptionsBuilder","title":"Builder"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/#builder","text":"class Builder (source) Call from the Application\u2019s onCreate() to implement PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build ()","title":"Builder"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/#types","text":"Name Summary ColorsBuilder Customize PinAuthenticationActivity \u2018s colors. class ColorsBuilder OptionsBuilder Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. class OptionsBuilder","title":"Types"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/#constructors","text":"Name Summary <init> Call from the Application\u2019s onCreate() to implement Builder()","title":"Constructors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/#functions","text":"Name Summary setApplicationAndBuildConfig Sets the Application which is used throughout PinAuthentication . It initializes PinAuthentication \u2018s DaggerApplicationComponent which then is used to inject classes as needed. See CompanionInjection See Companion.injected fun setApplicationAndBuildConfig(application: Application , buildConfigDebug: Boolean ): OptionsBuilder","title":"Functions"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-init-/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / <init> <init> \u00b6 Builder() Call from the Application\u2019s onCreate() to implement PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build ()","title":" init "},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-init-/#init","text":"Builder() Call from the Application\u2019s onCreate() to implement PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build ()","title":"&lt;init&gt;"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/set-application-and-build-config/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / setApplicationAndBuildConfig setApplicationAndBuildConfig \u00b6 fun setApplicationAndBuildConfig(application: Application , buildConfigDebug: Boolean ): OptionsBuilder (source) Sets the Application which is used throughout PinAuthentication . It initializes PinAuthentication \u2018s DaggerApplicationComponent which then is used to inject classes as needed. See CompanionInjection See Companion.injected It also sets the PinAuthenticationActivity \u2018s window flag to secure for release builds to inhibit screen capture of the user\u2019s PIN. See Builder for sample code. Parameters \u00b6 application - Application buildConfigDebug - Boolean - (send BuildConfig.DEBUG) Return OptionsBuilder","title":"Set application and build config"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/set-application-and-build-config/#setapplicationandbuildconfig","text":"fun setApplicationAndBuildConfig(application: Application , buildConfigDebug: Boolean ): OptionsBuilder (source) Sets the Application which is used throughout PinAuthentication . It initializes PinAuthentication \u2018s DaggerApplicationComponent which then is used to inject classes as needed. See CompanionInjection See Companion.injected It also sets the PinAuthenticationActivity \u2018s window flag to secure for release builds to inhibit screen capture of the user\u2019s PIN. See Builder for sample code.","title":"setApplicationAndBuildConfig"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/set-application-and-build-config/#parameters","text":"application - Application buildConfigDebug - Boolean - (send BuildConfig.DEBUG) Return OptionsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder ColorsBuilder \u00b6 class ColorsBuilder (source) Customize PinAuthenticationActivity \u2018s colors. This Builder is used in 2 ways. Via: OptionsBuilder.setCustomColors method being called which \u201cunlocks\u201d these options while initializing PinAuthentication.Builder . Settings.setCustomColors method for modifying colors after PinAuthentication has been initialized. Call applyColors when done. PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build () binding . buttonSettingsSetCustomColors . setOnClickListener { paSettings . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . applyColors () App . showToast ( getString ( R . string . toast_set_custom_colors )) } Parameters \u00b6 optionsBuilder - OptionsBuilder ? Constructors \u00b6 Name Summary <init> Customize PinAuthenticationActivity \u2018s colors. ColorsBuilder(optionsBuilder: OptionsBuilder?) Functions \u00b6 Name Summary applyColors If being used when initializing PinAuthentication.Builder , will return OptionsBuilder If being used from PinAuthentication.Settings.setCustomColors , will return null . fun applyColors(): OptionsBuilder? set1_BackspaceButtonImageColor Set the color for id.button_pin_authentication_backspace \u2018s image. fun set1_BackspaceButtonImageColor(colorRes: Int ): ColorsBuilder set2_ConfirmButtonBackgroundColor Set the color for id.button_pin_authentication_confirm \u2018s background. fun set2_ConfirmButtonBackgroundColor(colorRes: Int ): ColorsBuilder set3_ConfirmButtonImageColor Set the color for id.button_pin_authentication_confirm \u2018s image. fun set3_ConfirmButtonImageColor(colorRes: Int ): ColorsBuilder set4_PinHintContainerColor Set the color for id.layout_linear_pin_authentication_pin_hint \u2018s background. fun set4_PinHintContainerColor(colorRes: Int ): ColorsBuilder set5_PinHintImageColor Set the color for id.image_view_pin_authentication_dot1 through id.image_view_pin_authentication_dot14 \u2018s image fun set5_PinHintImageColor(colorRes: Int ): ColorsBuilder set6_PinPadButtonBackgroundColor Set the background color for all buttons (except id.button_pin_authentication_confirm ) fun set6_PinPadButtonBackgroundColor(colorRes: Int ): ColorsBuilder set7_PinResetInfoImageColor Set the color for id.image_view_pin_authentication_reset_help fun set7_PinResetInfoImageColor(colorRes: Int ): ColorsBuilder set8_ScreenBackgroundColor Set the color for id.layout_constraint_pin_authentication_container fun set8_ScreenBackgroundColor(colorRes: Int ): ColorsBuilder set9_TextColor Set the color for all text fun set9_TextColor(colorRes: Int ): ColorsBuilder","title":"Index"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/#colorsbuilder","text":"class ColorsBuilder (source) Customize PinAuthenticationActivity \u2018s colors. This Builder is used in 2 ways. Via: OptionsBuilder.setCustomColors method being called which \u201cunlocks\u201d these options while initializing PinAuthentication.Builder . Settings.setCustomColors method for modifying colors after PinAuthentication has been initialized. Call applyColors when done. PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build () binding . buttonSettingsSetCustomColors . setOnClickListener { paSettings . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . applyColors () App . showToast ( getString ( R . string . toast_set_custom_colors )) }","title":"ColorsBuilder"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/#parameters","text":"optionsBuilder - OptionsBuilder ?","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/#constructors","text":"Name Summary <init> Customize PinAuthenticationActivity \u2018s colors. ColorsBuilder(optionsBuilder: OptionsBuilder?)","title":"Constructors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/#functions","text":"Name Summary applyColors If being used when initializing PinAuthentication.Builder , will return OptionsBuilder If being used from PinAuthentication.Settings.setCustomColors , will return null . fun applyColors(): OptionsBuilder? set1_BackspaceButtonImageColor Set the color for id.button_pin_authentication_backspace \u2018s image. fun set1_BackspaceButtonImageColor(colorRes: Int ): ColorsBuilder set2_ConfirmButtonBackgroundColor Set the color for id.button_pin_authentication_confirm \u2018s background. fun set2_ConfirmButtonBackgroundColor(colorRes: Int ): ColorsBuilder set3_ConfirmButtonImageColor Set the color for id.button_pin_authentication_confirm \u2018s image. fun set3_ConfirmButtonImageColor(colorRes: Int ): ColorsBuilder set4_PinHintContainerColor Set the color for id.layout_linear_pin_authentication_pin_hint \u2018s background. fun set4_PinHintContainerColor(colorRes: Int ): ColorsBuilder set5_PinHintImageColor Set the color for id.image_view_pin_authentication_dot1 through id.image_view_pin_authentication_dot14 \u2018s image fun set5_PinHintImageColor(colorRes: Int ): ColorsBuilder set6_PinPadButtonBackgroundColor Set the background color for all buttons (except id.button_pin_authentication_confirm ) fun set6_PinPadButtonBackgroundColor(colorRes: Int ): ColorsBuilder set7_PinResetInfoImageColor Set the color for id.image_view_pin_authentication_reset_help fun set7_PinResetInfoImageColor(colorRes: Int ): ColorsBuilder set8_ScreenBackgroundColor Set the color for id.layout_constraint_pin_authentication_container fun set8_ScreenBackgroundColor(colorRes: Int ): ColorsBuilder set9_TextColor Set the color for all text fun set9_TextColor(colorRes: Int ): ColorsBuilder","title":"Functions"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/-init-/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / <init> <init> \u00b6 ColorsBuilder(optionsBuilder: OptionsBuilder?) Customize PinAuthenticationActivity \u2018s colors. This Builder is used in 2 ways. Via: OptionsBuilder.setCustomColors method being called which \u201cunlocks\u201d these options while initializing PinAuthentication.Builder . Settings.setCustomColors method for modifying colors after PinAuthentication has been initialized. Call applyColors when done. PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build () binding . buttonSettingsSetCustomColors . setOnClickListener { paSettings . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . applyColors () App . showToast ( getString ( R . string . toast_set_custom_colors )) } Parameters \u00b6 optionsBuilder - OptionsBuilder ?","title":" init "},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/-init-/#init","text":"ColorsBuilder(optionsBuilder: OptionsBuilder?) Customize PinAuthenticationActivity \u2018s colors. This Builder is used in 2 ways. Via: OptionsBuilder.setCustomColors method being called which \u201cunlocks\u201d these options while initializing PinAuthentication.Builder . Settings.setCustomColors method for modifying colors after PinAuthentication has been initialized. Call applyColors when done. PinAuthentication . Builder () . setApplicationAndBuildConfig ( this , BuildConfig . DEBUG ) . applicationHasOnBoardProcess () . enableBackgroundLogoutTimer ( 4 ) . enableHapticFeedbackByDefault () . enablePinSecurityByDefault () . enableScrambledPinByDefault () . enableWrongPinLockout ( 10 , 3 ) . setMinimumPinLength ( 4 ) /** * Set custom colors for [PinAuthentication]'s Activity which will overwrite * the default color value for that view. * * Colors can also be changed after initialization of * [PinAuthentication] by utilizing [PinAuthentication.Settings.setCustomColors] * method, and also reset back to the colors chosen here by utilizing the * [PinAuthentication.Settings.resetColorsToApplicationDefaults] method. * * @see [PinAuthentication.Builder.OptionsBuilder.setCustomColors] * @see [PinAuthentication.Builder.ColorsBuilder] * */ . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . secondaryLightColor ) . set4_PinHintContainerColor ( R . color . primaryDarkColor ) . set6_PinPadButtonBackgroundColor ( R . color . primaryDarkColor ) . set8_ScreenBackgroundColor ( R . color . primaryColor ) /** * Calling applyColors from within the Builder will **NOT** return null. null is only * returned if calling [PinAuthentication.Settings.setCustomColors]. * * @see [PinAuthentication.Builder.ColorsBuilder.applyColors] * */ . applyColors () !! . build () binding . buttonSettingsSetCustomColors . setOnClickListener { paSettings . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . applyColors () App . showToast ( getString ( R . string . toast_set_custom_colors )) }","title":"&lt;init&gt;"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/-init-/#parameters","text":"optionsBuilder - OptionsBuilder ?","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/apply-colors/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / applyColors applyColors \u00b6 fun applyColors(): OptionsBuilder? (source) * If being used when initializing PinAuthentication.Builder , will return OptionsBuilder If being used from PinAuthentication.Settings.setCustomColors , will return null . See ColorsBuilder for sample code. Return optionsBuilder","title":"Apply colors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/apply-colors/#applycolors","text":"fun applyColors(): OptionsBuilder? (source) * If being used when initializing PinAuthentication.Builder , will return OptionsBuilder If being used from PinAuthentication.Settings.setCustomColors , will return null . See ColorsBuilder for sample code. Return optionsBuilder","title":"applyColors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set1_-backspace-button-image-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set1_BackspaceButtonImageColor set1_BackspaceButtonImageColor \u00b6 fun set1_BackspaceButtonImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.button_pin_authentication_backspace \u2018s image. See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set1  backspace button image color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set1_-backspace-button-image-color/#set1_backspacebuttonimagecolor","text":"fun set1_BackspaceButtonImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.button_pin_authentication_backspace \u2018s image. See ColorsBuilder for sample code.","title":"set1_BackspaceButtonImageColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set1_-backspace-button-image-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set2_-confirm-button-background-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set2_ConfirmButtonBackgroundColor set2_ConfirmButtonBackgroundColor \u00b6 fun set2_ConfirmButtonBackgroundColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.button_pin_authentication_confirm \u2018s background. See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set2  confirm button background color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set2_-confirm-button-background-color/#set2_confirmbuttonbackgroundcolor","text":"fun set2_ConfirmButtonBackgroundColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.button_pin_authentication_confirm \u2018s background. See ColorsBuilder for sample code.","title":"set2_ConfirmButtonBackgroundColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set2_-confirm-button-background-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set3_-confirm-button-image-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set3_ConfirmButtonImageColor set3_ConfirmButtonImageColor \u00b6 fun set3_ConfirmButtonImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.button_pin_authentication_confirm \u2018s image. See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set3  confirm button image color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set3_-confirm-button-image-color/#set3_confirmbuttonimagecolor","text":"fun set3_ConfirmButtonImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.button_pin_authentication_confirm \u2018s image. See ColorsBuilder for sample code.","title":"set3_ConfirmButtonImageColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set3_-confirm-button-image-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set4_-pin-hint-container-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set4_PinHintContainerColor set4_PinHintContainerColor \u00b6 fun set4_PinHintContainerColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.layout_linear_pin_authentication_pin_hint \u2018s background. See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set4  pin hint container color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set4_-pin-hint-container-color/#set4_pinhintcontainercolor","text":"fun set4_PinHintContainerColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.layout_linear_pin_authentication_pin_hint \u2018s background. See ColorsBuilder for sample code.","title":"set4_PinHintContainerColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set4_-pin-hint-container-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set5_-pin-hint-image-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set5_PinHintImageColor set5_PinHintImageColor \u00b6 fun set5_PinHintImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.image_view_pin_authentication_dot1 through id.image_view_pin_authentication_dot14 \u2018s image See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set5  pin hint image color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set5_-pin-hint-image-color/#set5_pinhintimagecolor","text":"fun set5_PinHintImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.image_view_pin_authentication_dot1 through id.image_view_pin_authentication_dot14 \u2018s image See ColorsBuilder for sample code.","title":"set5_PinHintImageColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set5_-pin-hint-image-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set6_-pin-pad-button-background-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set6_PinPadButtonBackgroundColor set6_PinPadButtonBackgroundColor \u00b6 fun set6_PinPadButtonBackgroundColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the background color for all buttons (except id.button_pin_authentication_confirm ) See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set6  pin pad button background color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set6_-pin-pad-button-background-color/#set6_pinpadbuttonbackgroundcolor","text":"fun set6_PinPadButtonBackgroundColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the background color for all buttons (except id.button_pin_authentication_confirm ) See ColorsBuilder for sample code.","title":"set6_PinPadButtonBackgroundColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set6_-pin-pad-button-background-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set7_-pin-reset-info-image-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set7_PinResetInfoImageColor set7_PinResetInfoImageColor \u00b6 fun set7_PinResetInfoImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.image_view_pin_authentication_reset_help See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set7  pin reset info image color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set7_-pin-reset-info-image-color/#set7_pinresetinfoimagecolor","text":"fun set7_PinResetInfoImageColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.image_view_pin_authentication_reset_help See ColorsBuilder for sample code.","title":"set7_PinResetInfoImageColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set7_-pin-reset-info-image-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set8_-screen-background-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set8_ScreenBackgroundColor set8_ScreenBackgroundColor \u00b6 fun set8_ScreenBackgroundColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.layout_constraint_pin_authentication_container See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set8  screen background color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set8_-screen-background-color/#set8_screenbackgroundcolor","text":"fun set8_ScreenBackgroundColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for id.layout_constraint_pin_authentication_container See ColorsBuilder for sample code.","title":"set8_ScreenBackgroundColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set8_-screen-background-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set9_-text-color/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / ColorsBuilder / set9_TextColor set9_TextColor \u00b6 fun set9_TextColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for all text See ColorsBuilder for sample code. Parameters \u00b6 colorRes - Return ColorsBuilder","title":"Set9  text color"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set9_-text-color/#set9_textcolor","text":"fun set9_TextColor(@ColorRes colorRes: Int ): ColorsBuilder (source) Set the color for all text See ColorsBuilder for sample code.","title":"set9_TextColor"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-colors-builder/set9_-text-color/#parameters","text":"colorRes - Return ColorsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder OptionsBuilder \u00b6 class OptionsBuilder (source) Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. See Builder for sample code. Parameters \u00b6 buildConfigDebug - Boolean Constructors \u00b6 Name Summary <init> Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. OptionsBuilder(buildConfigDebug: Boolean ) Functions \u00b6 Name Summary applicationHasOnBoardProcess By default, application has on-board process is DISABLED. fun applicationHasOnBoardProcess(): OptionsBuilder build Initializes PinAuthentication fun build(): Unit enableBackgroundLogoutTimer By default, background logout timer is DISABLED. fun enableBackgroundLogoutTimer(secondsLessThan30: Int ): OptionsBuilder enableHapticFeedbackByDefault By default, haptic feedback is DISABLED. fun enableHapticFeedbackByDefault(): OptionsBuilder enablePinSecurityByDefault By default, pin security is DISABLED. fun enablePinSecurityByDefault(): OptionsBuilder enableScrambledPinByDefault By default, scrambled pin is DISABLED. fun enableScrambledPinByDefault(): OptionsBuilder enableWrongPinLockout By default, wrong pin lockout is DISABLED. fun enableWrongPinLockout(lockoutDurationSeconds: Int , maxPinAttempts: Int ): OptionsBuilder setCustomColors Calling this method will return another Builder for customizing the colors of PinAuthenticationActivity . fun setCustomColors(): ColorsBuilder setMinimumPinLength By default, minimum pin length is set to 4. fun setMinimumPinLength(intFrom4To14: Int ): OptionsBuilder","title":"Index"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/#optionsbuilder","text":"class OptionsBuilder (source) Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. See Builder for sample code.","title":"OptionsBuilder"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/#parameters","text":"buildConfigDebug - Boolean","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/#constructors","text":"Name Summary <init> Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. OptionsBuilder(buildConfigDebug: Boolean )","title":"Constructors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/#functions","text":"Name Summary applicationHasOnBoardProcess By default, application has on-board process is DISABLED. fun applicationHasOnBoardProcess(): OptionsBuilder build Initializes PinAuthentication fun build(): Unit enableBackgroundLogoutTimer By default, background logout timer is DISABLED. fun enableBackgroundLogoutTimer(secondsLessThan30: Int ): OptionsBuilder enableHapticFeedbackByDefault By default, haptic feedback is DISABLED. fun enableHapticFeedbackByDefault(): OptionsBuilder enablePinSecurityByDefault By default, pin security is DISABLED. fun enablePinSecurityByDefault(): OptionsBuilder enableScrambledPinByDefault By default, scrambled pin is DISABLED. fun enableScrambledPinByDefault(): OptionsBuilder enableWrongPinLockout By default, wrong pin lockout is DISABLED. fun enableWrongPinLockout(lockoutDurationSeconds: Int , maxPinAttempts: Int ): OptionsBuilder setCustomColors Calling this method will return another Builder for customizing the colors of PinAuthenticationActivity . fun setCustomColors(): ColorsBuilder setMinimumPinLength By default, minimum pin length is set to 4. fun setMinimumPinLength(intFrom4To14: Int ): OptionsBuilder","title":"Functions"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/-init-/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / <init> <init> \u00b6 OptionsBuilder(buildConfigDebug: Boolean ) Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. See Builder for sample code. Parameters \u00b6 buildConfigDebug - Boolean","title":" init "},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/-init-/#init","text":"OptionsBuilder(buildConfigDebug: Boolean ) Meant to only be used after calling Builder.setApplicationAndBuildConfig , which returns this class. See Builder for sample code.","title":"&lt;init&gt;"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/-init-/#parameters","text":"buildConfigDebug - Boolean","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/application-has-on-board-process/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / applicationHasOnBoardProcess applicationHasOnBoardProcess \u00b6 fun applicationHasOnBoardProcess(): OptionsBuilder (source) By default, application has on-board process is DISABLED. Enabling this will delay everything until on-boarding process has been completed. At end of your on-boarding, hit the Controller.completeOnBoardProcess method to kick everything off. See Builder for sample code. Return OptionsBuilder","title":"Application has on board process"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/application-has-on-board-process/#applicationhasonboardprocess","text":"fun applicationHasOnBoardProcess(): OptionsBuilder (source) By default, application has on-board process is DISABLED. Enabling this will delay everything until on-boarding process has been completed. At end of your on-boarding, hit the Controller.completeOnBoardProcess method to kick everything off. See Builder for sample code. Return OptionsBuilder","title":"applicationHasOnBoardProcess"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/build/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / build build \u00b6 fun build(): Unit (source) Initializes PinAuthentication See Builder for code sample.","title":"Build"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/build/#build","text":"fun build(): Unit (source) Initializes PinAuthentication See Builder for code sample.","title":"build"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-background-logout-timer/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / enableBackgroundLogoutTimer enableBackgroundLogoutTimer \u00b6 fun enableBackgroundLogoutTimer(secondsLessThan30: Int ): OptionsBuilder (source) By default, background logout timer is DISABLED. Sets the length of time the application spends in the background before automatically logging out. The maximum time to set this value is 29s. See Builder for sample code. Parameters \u00b6 secondsLessThan30 - Int - (Set to 0 to DISABLE) See Also AppLockObserver.launchAuthInvalidationJobIfInactive Return OptionsBuilder","title":"Enable background logout timer"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-background-logout-timer/#enablebackgroundlogouttimer","text":"fun enableBackgroundLogoutTimer(secondsLessThan30: Int ): OptionsBuilder (source) By default, background logout timer is DISABLED. Sets the length of time the application spends in the background before automatically logging out. The maximum time to set this value is 29s. See Builder for sample code.","title":"enableBackgroundLogoutTimer"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-background-logout-timer/#parameters","text":"secondsLessThan30 - Int - (Set to 0 to DISABLE) See Also AppLockObserver.launchAuthInvalidationJobIfInactive Return OptionsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-haptic-feedback-by-default/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / enableHapticFeedbackByDefault enableHapticFeedbackByDefault \u00b6 fun enableHapticFeedbackByDefault(): OptionsBuilder (source) By default, haptic feedback is DISABLED. Declaring this in your Builder will enable it. This can be changed later by the user if you include in your settings UI the ability to enable it via accessing Settings.enableHapticFeedback method. The user\u2019s setting for this will always be loaded after this method. See Builder for sample code. Return OptionsBuilder","title":"Enable haptic feedback by default"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-haptic-feedback-by-default/#enablehapticfeedbackbydefault","text":"fun enableHapticFeedbackByDefault(): OptionsBuilder (source) By default, haptic feedback is DISABLED. Declaring this in your Builder will enable it. This can be changed later by the user if you include in your settings UI the ability to enable it via accessing Settings.enableHapticFeedback method. The user\u2019s setting for this will always be loaded after this method. See Builder for sample code. Return OptionsBuilder","title":"enableHapticFeedbackByDefault"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-pin-security-by-default/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / enablePinSecurityByDefault enablePinSecurityByDefault \u00b6 fun enablePinSecurityByDefault(): OptionsBuilder (source) By default, pin security is DISABLED. Declaring this in your Builder will enable it. This can be changed later by the user if you include in your settings UI the ability to enable it via accessing Settings.enablePinSecurity method. The user\u2019s setting for this will always be loaded after this method. See Builder for sample code. Return OptionsBuilder","title":"Enable pin security by default"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-pin-security-by-default/#enablepinsecuritybydefault","text":"fun enablePinSecurityByDefault(): OptionsBuilder (source) By default, pin security is DISABLED. Declaring this in your Builder will enable it. This can be changed later by the user if you include in your settings UI the ability to enable it via accessing Settings.enablePinSecurity method. The user\u2019s setting for this will always be loaded after this method. See Builder for sample code. Return OptionsBuilder","title":"enablePinSecurityByDefault"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-scrambled-pin-by-default/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / enableScrambledPinByDefault enableScrambledPinByDefault \u00b6 fun enableScrambledPinByDefault(): OptionsBuilder (source) By default, scrambled pin is DISABLED. Declaring this in your Builder will enable it. This can be changed later by the user if you include in your settings UI the ability to enable it via accessing Settings.enableScrambledPin method. The user\u2019s setting for this will always be loaded after this method. See Builder for sample code. Return OptionsBuilder","title":"Enable scrambled pin by default"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-scrambled-pin-by-default/#enablescrambledpinbydefault","text":"fun enableScrambledPinByDefault(): OptionsBuilder (source) By default, scrambled pin is DISABLED. Declaring this in your Builder will enable it. This can be changed later by the user if you include in your settings UI the ability to enable it via accessing Settings.enableScrambledPin method. The user\u2019s setting for this will always be loaded after this method. See Builder for sample code. Return OptionsBuilder","title":"enableScrambledPinByDefault"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-wrong-pin-lockout/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / enableWrongPinLockout enableWrongPinLockout \u00b6 fun enableWrongPinLockout(lockoutDurationSeconds: Int , maxPinAttempts: Int ): OptionsBuilder (source) By default, wrong pin lockout is DISABLED. Enabling this will inhibit the user from confirming their pin after the declared value of maxPinAttempts has been met. They must wait for the declared value of lockoutDurationSeconds until they can try again. See Builder for sample code. Parameters \u00b6 lockoutDurationSeconds - Int maxPinAttempts - Int See Also WrongPinLockout Return OptionsBuilder","title":"Enable wrong pin lockout"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-wrong-pin-lockout/#enablewrongpinlockout","text":"fun enableWrongPinLockout(lockoutDurationSeconds: Int , maxPinAttempts: Int ): OptionsBuilder (source) By default, wrong pin lockout is DISABLED. Enabling this will inhibit the user from confirming their pin after the declared value of maxPinAttempts has been met. They must wait for the declared value of lockoutDurationSeconds until they can try again. See Builder for sample code.","title":"enableWrongPinLockout"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/enable-wrong-pin-lockout/#parameters","text":"lockoutDurationSeconds - Int maxPinAttempts - Int See Also WrongPinLockout Return OptionsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/set-custom-colors/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / setCustomColors setCustomColors \u00b6 fun setCustomColors(): ColorsBuilder (source) Calling this method will return another Builder for customizing the colors of PinAuthenticationActivity . When done customizing the colors, call ColorsBuilder.applyColors and it will return you to the previous OptionsBuilder to continue initialization. If this method is being called it will ensure that the Application colors stay set so that, if at a later time colors are changed via Settings.setCustomColors method, reversion back to original colors defined during the Application\u2019s onCreate() process will be had and not PinAuthentication \u2018s default colors. See Builder for sample code. Return ColorsBuilder","title":"Set custom colors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/set-custom-colors/#setcustomcolors","text":"fun setCustomColors(): ColorsBuilder (source) Calling this method will return another Builder for customizing the colors of PinAuthenticationActivity . When done customizing the colors, call ColorsBuilder.applyColors and it will return you to the previous OptionsBuilder to continue initialization. If this method is being called it will ensure that the Application colors stay set so that, if at a later time colors are changed via Settings.setCustomColors method, reversion back to original colors defined during the Application\u2019s onCreate() process will be had and not PinAuthentication \u2018s default colors. See Builder for sample code. Return ColorsBuilder","title":"setCustomColors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/set-minimum-pin-length/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Builder / OptionsBuilder / setMinimumPinLength setMinimumPinLength \u00b6 fun setMinimumPinLength(intFrom4To14: Int ): OptionsBuilder (source) By default, minimum pin length is set to 4. Set a minimum pin length, between 4 to 14. This minimum value must be met when the user is entering their PIN before the confirm button for PinAuthenticationActivity becomes visible. See Builder for sample code. Parameters \u00b6 intFrom4To14 - Int See Also id.button_pin_authentication_confirm BindingAdapters.paInvisibleUnless Return OptionsBuilder","title":"Set minimum pin length"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/set-minimum-pin-length/#setminimumpinlength","text":"fun setMinimumPinLength(intFrom4To14: Int ): OptionsBuilder (source) By default, minimum pin length is set to 4. Set a minimum pin length, between 4 to 14. This minimum value must be met when the user is entering their PIN before the confirm button for PinAuthenticationActivity becomes visible. See Builder for sample code.","title":"setMinimumPinLength"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-builder/-options-builder/set-minimum-pin-length/#parameters","text":"intFrom4To14 - Int See Also id.button_pin_authentication_confirm BindingAdapters.paInvisibleUnless Return OptionsBuilder","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller Controller \u00b6 class Controller (source) PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features. Constructors \u00b6 Name Summary <init> PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features. Controller() Functions \u00b6 Name Summary clearPinAuthenticationData Clears data associated with PinAuthentication from SharedPreferences, and EncryptedSharedPreferences. fun clearPinAuthenticationData(): Unit completeOnBoardProcess Declares the on-board process as being complete, and if Pin Security is: fun completeOnBoardProcess(): Unit hasInitialAppLoginBeenSatisfied Returns a boolean value that will change from false to true, and stay true until the application is terminated. fun hasInitialAppLoginBeenSatisfied(): LiveData< Boolean > hasOnBoardProcessBeenSatisfied Returns TRUE if: fun hasOnBoardProcessBeenSatisfied(): Boolean hasPostLoginProcessBeenStarted Check if your startup process has previously been started. fun hasPostLoginProcessBeenStarted(): Boolean isPinSecurityEnabled See registerPinConfirmationToProceedRequestKey sample code. fun isPinSecurityEnabled(): Boolean postLoginProcessStarted After Controller.hasPostLoginProcessBeenStarted returns false and your one-time processes start, use this method to set the value to true so that your post login processes won\u2019t be executed again if the observer on Controller.hasInitialAppLoginBeenSatisfied gets proc\u2019d again. fun postLoginProcessStarted(): Unit registerPinConfirmationToProceedRequestKey Register request keys. fun registerPinConfirmationToProceedRequestKey(activity: Activity , requestKey: String ): LiveData< Boolean >? Adds a requestKey to ConfirmPinToProceed.mapRequestKeys and returns LiveData associated with it which will change after calling Controller.requestPinConfirmationToProceed depending on whether or not the User enters the correct pin. fun registerPinConfirmationToProceedRequestKey(fragment: Fragment, requestKey: String ): LiveData< Boolean >? requestPinConfirmationToProceed To be used after registering the requestKey via Controller.registerPinConfirmationToProceedRequestKey . fun requestPinConfirmationToProceed(requestKey: String ): Unit resetPinConfirmationToProceedRequestKey Reset the boolean value associated with the requestKey to false to proc the observer that is setup on the Controller.registerPinConfirmationToProceedRequestKey method. fun resetPinConfirmationToProceedRequestKey(requestKey: String ): Unit unregisterPinConfirmationToProceedRequestKey Remove registered request key. fun unregisterPinConfirmationToProceedRequestKey(requestKey: String ): Unit Removes the requestKey and LiveData values from the Map contained in ConfirmPinToProceed.mapRequestKeys . fun unregisterPinConfirmationToProceedRequestKey(requestKeys: Array < String >): Unit","title":"Controller"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/#controller","text":"class Controller (source) PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features.","title":"Controller"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/#constructors","text":"Name Summary <init> PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features. Controller()","title":"Constructors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/#functions","text":"Name Summary clearPinAuthenticationData Clears data associated with PinAuthentication from SharedPreferences, and EncryptedSharedPreferences. fun clearPinAuthenticationData(): Unit completeOnBoardProcess Declares the on-board process as being complete, and if Pin Security is: fun completeOnBoardProcess(): Unit hasInitialAppLoginBeenSatisfied Returns a boolean value that will change from false to true, and stay true until the application is terminated. fun hasInitialAppLoginBeenSatisfied(): LiveData< Boolean > hasOnBoardProcessBeenSatisfied Returns TRUE if: fun hasOnBoardProcessBeenSatisfied(): Boolean hasPostLoginProcessBeenStarted Check if your startup process has previously been started. fun hasPostLoginProcessBeenStarted(): Boolean isPinSecurityEnabled See registerPinConfirmationToProceedRequestKey sample code. fun isPinSecurityEnabled(): Boolean postLoginProcessStarted After Controller.hasPostLoginProcessBeenStarted returns false and your one-time processes start, use this method to set the value to true so that your post login processes won\u2019t be executed again if the observer on Controller.hasInitialAppLoginBeenSatisfied gets proc\u2019d again. fun postLoginProcessStarted(): Unit registerPinConfirmationToProceedRequestKey Register request keys. fun registerPinConfirmationToProceedRequestKey(activity: Activity , requestKey: String ): LiveData< Boolean >? Adds a requestKey to ConfirmPinToProceed.mapRequestKeys and returns LiveData associated with it which will change after calling Controller.requestPinConfirmationToProceed depending on whether or not the User enters the correct pin. fun registerPinConfirmationToProceedRequestKey(fragment: Fragment, requestKey: String ): LiveData< Boolean >? requestPinConfirmationToProceed To be used after registering the requestKey via Controller.registerPinConfirmationToProceedRequestKey . fun requestPinConfirmationToProceed(requestKey: String ): Unit resetPinConfirmationToProceedRequestKey Reset the boolean value associated with the requestKey to false to proc the observer that is setup on the Controller.registerPinConfirmationToProceedRequestKey method. fun resetPinConfirmationToProceedRequestKey(requestKey: String ): Unit unregisterPinConfirmationToProceedRequestKey Remove registered request key. fun unregisterPinConfirmationToProceedRequestKey(requestKey: String ): Unit Removes the requestKey and LiveData values from the Map contained in ConfirmPinToProceed.mapRequestKeys . fun unregisterPinConfirmationToProceedRequestKey(requestKeys: Array < String >): Unit","title":"Functions"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/-init-/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / <init> <init> \u00b6 Controller() PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features.","title":" init "},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/-init-/#init","text":"Controller() PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication to access core features.","title":"&lt;init&gt;"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/clear-pin-authentication-data/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / clearPinAuthenticationData clearPinAuthenticationData \u00b6 fun clearPinAuthenticationData(): Unit (source) Clears data associated with PinAuthentication from SharedPreferences, and EncryptedSharedPreferences. Would suggest restarting the application afterwards to avoid unintended operation.","title":"Clear pin authentication data"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/clear-pin-authentication-data/#clearpinauthenticationdata","text":"fun clearPinAuthenticationData(): Unit (source) Clears data associated with PinAuthentication from SharedPreferences, and EncryptedSharedPreferences. Would suggest restarting the application afterwards to avoid unintended operation.","title":"clearPinAuthenticationData"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/complete-on-board-process/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / completeOnBoardProcess completeOnBoardProcess \u00b6 fun completeOnBoardProcess(): Unit (source) Declares the on-board process as being complete, and if Pin Security is: ENABLED: Immediately prompts the user to set their PIN before continuing. OR DISABLED: Sets InitialAppLogin.initialApplicationLoginSatisfied to true. Declaring the on-board process as completed is saved to SharedPreferences such that henceforth, PinAuthentication will immediately request a PIN to login at application start (if pin security is enabled). binding . buttonOnBoardNext . setOnClickListener { PinAuthentication . Controller (). completeOnBoardProcess () resetMotionLayout () } See Also AppLockObserver.hijackApp","title":"Complete on board process"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/complete-on-board-process/#completeonboardprocess","text":"fun completeOnBoardProcess(): Unit (source) Declares the on-board process as being complete, and if Pin Security is: ENABLED: Immediately prompts the user to set their PIN before continuing. OR DISABLED: Sets InitialAppLogin.initialApplicationLoginSatisfied to true. Declaring the on-board process as completed is saved to SharedPreferences such that henceforth, PinAuthentication will immediately request a PIN to login at application start (if pin security is enabled). binding . buttonOnBoardNext . setOnClickListener { PinAuthentication . Controller (). completeOnBoardProcess () resetMotionLayout () } See Also AppLockObserver.hijackApp","title":"completeOnBoardProcess"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/has-initial-app-login-been-satisfied/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / hasInitialAppLoginBeenSatisfied hasInitialAppLoginBeenSatisfied \u00b6 fun hasInitialAppLoginBeenSatisfied(): LiveData< Boolean > (source) Returns a boolean value that will change from false to true, and stay true until the application is terminated. This boolean value gets changed when the user opens the application and: If pin security is ENABLED and they successfully log in. OR If pin security was DISABLED and the application on-board process has been satisfied when this method is called for the first time. Primary use case for this is to hold application processes until authentication has been had, for example, on your landing Activity/Fragment. paController . hasInitialAppLoginBeenSatisfied (). observe ( this , Observer < Boolean > { if ( it ) { // Update our currentTheme and recreate if ( currentTheme == R . style . OnApplicationStartTheme ) { // Could also load user selected themes from SharedPrefs here currentTheme = R . style . PostInitialLoginTheme recreate () } else { executePostLoginProcesses () } } else { // User has yet to either authenticate, or complete the on board process doOnBoard () // Hide the support action bar and bottom nav bar so we get a clean looking // transition on app startup. supportActionBar ?. hide () navView . visibility = View . GONE } }) Return LiveData","title":"Has initial app login been satisfied"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/has-initial-app-login-been-satisfied/#hasinitialapploginbeensatisfied","text":"fun hasInitialAppLoginBeenSatisfied(): LiveData< Boolean > (source) Returns a boolean value that will change from false to true, and stay true until the application is terminated. This boolean value gets changed when the user opens the application and: If pin security is ENABLED and they successfully log in. OR If pin security was DISABLED and the application on-board process has been satisfied when this method is called for the first time. Primary use case for this is to hold application processes until authentication has been had, for example, on your landing Activity/Fragment. paController . hasInitialAppLoginBeenSatisfied (). observe ( this , Observer < Boolean > { if ( it ) { // Update our currentTheme and recreate if ( currentTheme == R . style . OnApplicationStartTheme ) { // Could also load user selected themes from SharedPrefs here currentTheme = R . style . PostInitialLoginTheme recreate () } else { executePostLoginProcesses () } } else { // User has yet to either authenticate, or complete the on board process doOnBoard () // Hide the support action bar and bottom nav bar so we get a clean looking // transition on app startup. supportActionBar ?. hide () navView . visibility = View . GONE } }) Return LiveData","title":"hasInitialAppLoginBeenSatisfied"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/has-on-board-process-been-satisfied/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / hasOnBoardProcessBeenSatisfied hasOnBoardProcessBeenSatisfied \u00b6 fun hasOnBoardProcessBeenSatisfied(): Boolean (source) Returns TRUE if: You declared that your application has an on-board process via PinAuthentication.Builder.OptionsBuilder.applicationHasOnBoardProcess and the on-board process has been marked complete . OR You did not declare that your application has an on-board process. Returns FALSE if: You declared that your application has an on-board process via PinAuthentication.Builder.OptionsBuilder.applicationHasOnBoardProcess , but the on-board process has not been marked complete. if (! paController . hasOnBoardProcessBeenSatisfied ()) { if ( navController . currentDestination ?. id != R . id . navigation_on_board ) { navController . navigate ( R . id . navigation_on_board ) } } Return Boolean","title":"Has on board process been satisfied"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/has-on-board-process-been-satisfied/#hasonboardprocessbeensatisfied","text":"fun hasOnBoardProcessBeenSatisfied(): Boolean (source) Returns TRUE if: You declared that your application has an on-board process via PinAuthentication.Builder.OptionsBuilder.applicationHasOnBoardProcess and the on-board process has been marked complete . OR You did not declare that your application has an on-board process. Returns FALSE if: You declared that your application has an on-board process via PinAuthentication.Builder.OptionsBuilder.applicationHasOnBoardProcess , but the on-board process has not been marked complete. if (! paController . hasOnBoardProcessBeenSatisfied ()) { if ( navController . currentDestination ?. id != R . id . navigation_on_board ) { navController . navigate ( R . id . navigation_on_board ) } } Return Boolean","title":"hasOnBoardProcessBeenSatisfied"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/has-post-login-process-been-started/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / hasPostLoginProcessBeenStarted hasPostLoginProcessBeenStarted \u00b6 fun hasPostLoginProcessBeenStarted(): Boolean (source) Check if your startup process has previously been started. This is needed so that when observing the returned LiveData from Controller.hasInitialAppLoginBeenSatisfied , so your startup processes only get executed once. if (! paController . hasPostLoginProcessBeenStarted ()) { paController . postLoginProcessStarted () // if the on-board process was started, clear the backstack if ( navController . currentDestination ?. id != R . id . navigation_controller ) { val navOptions = NavOptions . Builder () . setPopUpTo ( R . id . mobile_navigation , true ) . build () navController . navigate ( R . id . navigation_controller , Bundle (), navOptions ) } // When initial login is satisfied make the support action bar // and bottom nav bar visible again. supportActionBar ?. show () navView . visibility = View . VISIBLE } See Also InitialAppLogin.hasPostLoginProcessBeenStarted Return Boolean","title":"Has post login process been started"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/has-post-login-process-been-started/#haspostloginprocessbeenstarted","text":"fun hasPostLoginProcessBeenStarted(): Boolean (source) Check if your startup process has previously been started. This is needed so that when observing the returned LiveData from Controller.hasInitialAppLoginBeenSatisfied , so your startup processes only get executed once. if (! paController . hasPostLoginProcessBeenStarted ()) { paController . postLoginProcessStarted () // if the on-board process was started, clear the backstack if ( navController . currentDestination ?. id != R . id . navigation_controller ) { val navOptions = NavOptions . Builder () . setPopUpTo ( R . id . mobile_navigation , true ) . build () navController . navigate ( R . id . navigation_controller , Bundle (), navOptions ) } // When initial login is satisfied make the support action bar // and bottom nav bar visible again. supportActionBar ?. show () navView . visibility = View . VISIBLE } See Also InitialAppLogin.hasPostLoginProcessBeenStarted Return Boolean","title":"hasPostLoginProcessBeenStarted"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/is-pin-security-enabled/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / isPinSecurityEnabled isPinSecurityEnabled \u00b6 fun isPinSecurityEnabled(): Boolean (source) See registerPinConfirmationToProceedRequestKey sample code. Return Boolean","title":"Is pin security enabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/is-pin-security-enabled/#ispinsecurityenabled","text":"fun isPinSecurityEnabled(): Boolean (source) See registerPinConfirmationToProceedRequestKey sample code. Return Boolean","title":"isPinSecurityEnabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/post-login-process-started/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / postLoginProcessStarted postLoginProcessStarted \u00b6 fun postLoginProcessStarted(): Unit (source) After Controller.hasPostLoginProcessBeenStarted returns false and your one-time processes start, use this method to set the value to true so that your post login processes won\u2019t be executed again if the observer on Controller.hasInitialAppLoginBeenSatisfied gets proc\u2019d again. if (! paController . hasPostLoginProcessBeenStarted ()) { paController . postLoginProcessStarted () // if the on-board process was started, clear the backstack if ( navController . currentDestination ?. id != R . id . navigation_controller ) { val navOptions = NavOptions . Builder () . setPopUpTo ( R . id . mobile_navigation , true ) . build () navController . navigate ( R . id . navigation_controller , Bundle (), navOptions ) } // When initial login is satisfied make the support action bar // and bottom nav bar visible again. supportActionBar ?. show () navView . visibility = View . VISIBLE }","title":"Post login process started"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/post-login-process-started/#postloginprocessstarted","text":"fun postLoginProcessStarted(): Unit (source) After Controller.hasPostLoginProcessBeenStarted returns false and your one-time processes start, use this method to set the value to true so that your post login processes won\u2019t be executed again if the observer on Controller.hasInitialAppLoginBeenSatisfied gets proc\u2019d again. if (! paController . hasPostLoginProcessBeenStarted ()) { paController . postLoginProcessStarted () // if the on-board process was started, clear the backstack if ( navController . currentDestination ?. id != R . id . navigation_controller ) { val navOptions = NavOptions . Builder () . setPopUpTo ( R . id . mobile_navigation , true ) . build () navController . navigate ( R . id . navigation_controller , Bundle (), navOptions ) } // When initial login is satisfied make the support action bar // and bottom nav bar visible again. supportActionBar ?. show () navView . visibility = View . VISIBLE }","title":"postLoginProcessStarted"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/register-pin-confirmation-to-proceed-request-key/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / registerPinConfirmationToProceedRequestKey registerPinConfirmationToProceedRequestKey \u00b6 fun registerPinConfirmationToProceedRequestKey(activity: Activity , requestKey: String ): LiveData< Boolean >? (source) Register request keys. fun registerPinConfirmationToProceedRequestKey(fragment: Fragment, requestKey: String ): LiveData< Boolean >? (source) Adds a requestKey to ConfirmPinToProceed.mapRequestKeys and returns LiveData associated with it which will change after calling Controller.requestPinConfirmationToProceed depending on whether or not the User enters the correct pin. TRUE -> Pin was confirmed FALSE -> Pin has not been confirmed If the requestKey is already registered, it will not overwrite the current value. // This button modifies itself based on the status of PIN confirmation for the // particular request. // If the user changes their PIN Security setting, all values associated with registered // RequestKeys will be switched to `false` (at the time PIN Security is enabled), or // `true` (at the time PIN Security is disabled). // At time of registering new RequestKeys, their values will be set to opposite of // PIN Security's state. // STEP 1: Register the RequestKey & observe the returned LiveData paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_1 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) binding . buttonControllerConfirmPinEx1 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex1 )) // STEP 3: Reset the value associated with the RequestKey paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_1 ) } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_confirm_pin_example_1 ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) // STEP 2: Request Pin Confirmation To Proceed binding . buttonControllerConfirmPinEx1 . setOnClickListener { paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_1 ) } } }) // STEP 4: Unregister the RequestKey in the Activity's onDestroy(), or a // Fragment's onDestroyView() _after_ the super call. // Alternative implementation of Pin Confirmation To Proceed which will go right // into doing something upon confirmation, or if PIN Security is DISABLED, will // simply require a click to proceed w/o confirming a PIN. paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_2 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) // If Pin Security is ENABLED, we want it to go right into doing something after // the user confirms their PIN. if ( paController . isPinSecurityEnabled ()) { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } else { // If PIN Security is DISABLED, we want to require a click so it doesn't // just execute something automatically when the screen is created. binding . buttonControllerConfirmPinEx2 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_confirm_pin_example_2 ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) binding . buttonControllerConfirmPinEx2 . setOnClickListener { // Make request to confirm PIN for this given request key. paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_2 ) } } }) Parameters \u00b6 activity - Activity OR fragment - Fragment requestKey - String Return LiveData?","title":"Register pin confirmation to proceed request key"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/register-pin-confirmation-to-proceed-request-key/#registerpinconfirmationtoproceedrequestkey","text":"fun registerPinConfirmationToProceedRequestKey(activity: Activity , requestKey: String ): LiveData< Boolean >? (source) Register request keys. fun registerPinConfirmationToProceedRequestKey(fragment: Fragment, requestKey: String ): LiveData< Boolean >? (source) Adds a requestKey to ConfirmPinToProceed.mapRequestKeys and returns LiveData associated with it which will change after calling Controller.requestPinConfirmationToProceed depending on whether or not the User enters the correct pin. TRUE -> Pin was confirmed FALSE -> Pin has not been confirmed If the requestKey is already registered, it will not overwrite the current value. // This button modifies itself based on the status of PIN confirmation for the // particular request. // If the user changes their PIN Security setting, all values associated with registered // RequestKeys will be switched to `false` (at the time PIN Security is enabled), or // `true` (at the time PIN Security is disabled). // At time of registering new RequestKeys, their values will be set to opposite of // PIN Security's state. // STEP 1: Register the RequestKey & observe the returned LiveData paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_1 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) binding . buttonControllerConfirmPinEx1 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex1 )) // STEP 3: Reset the value associated with the RequestKey paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_1 ) } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_confirm_pin_example_1 ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) // STEP 2: Request Pin Confirmation To Proceed binding . buttonControllerConfirmPinEx1 . setOnClickListener { paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_1 ) } } }) // STEP 4: Unregister the RequestKey in the Activity's onDestroy(), or a // Fragment's onDestroyView() _after_ the super call. // Alternative implementation of Pin Confirmation To Proceed which will go right // into doing something upon confirmation, or if PIN Security is DISABLED, will // simply require a click to proceed w/o confirming a PIN. paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_2 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) // If Pin Security is ENABLED, we want it to go right into doing something after // the user confirms their PIN. if ( paController . isPinSecurityEnabled ()) { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } else { // If PIN Security is DISABLED, we want to require a click so it doesn't // just execute something automatically when the screen is created. binding . buttonControllerConfirmPinEx2 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_confirm_pin_example_2 ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) binding . buttonControllerConfirmPinEx2 . setOnClickListener { // Make request to confirm PIN for this given request key. paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_2 ) } } })","title":"registerPinConfirmationToProceedRequestKey"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/register-pin-confirmation-to-proceed-request-key/#parameters","text":"activity - Activity OR fragment - Fragment requestKey - String Return LiveData?","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/request-pin-confirmation-to-proceed/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / requestPinConfirmationToProceed requestPinConfirmationToProceed \u00b6 fun requestPinConfirmationToProceed(requestKey: String ): Unit (source) To be used after registering the requestKey via Controller.registerPinConfirmationToProceedRequestKey . This will launch PinAuthenticationActivity in PAPinEntryState.CONFIRM_PIN configuration. If the requestKey is not registered, it does nothing. // This button modifies itself based on the status of PIN confirmation for the // particular request. // If the user changes their PIN Security setting, all values associated with registered // RequestKeys will be switched to `false` (at the time PIN Security is enabled), or // `true` (at the time PIN Security is disabled). // At time of registering new RequestKeys, their values will be set to opposite of // PIN Security's state. // STEP 1: Register the RequestKey & observe the returned LiveData paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_1 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) binding . buttonControllerConfirmPinEx1 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex1 )) // STEP 3: Reset the value associated with the RequestKey paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_1 ) } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_confirm_pin_example_1 ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) // STEP 2: Request Pin Confirmation To Proceed binding . buttonControllerConfirmPinEx1 . setOnClickListener { paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_1 ) } } }) // STEP 4: Unregister the RequestKey in the Activity's onDestroy(), or a // Fragment's onDestroyView() _after_ the super call. // Alternative implementation of Pin Confirmation To Proceed which will go right // into doing something upon confirmation, or if PIN Security is DISABLED, will // simply require a click to proceed w/o confirming a PIN. paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_2 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) // If Pin Security is ENABLED, we want it to go right into doing something after // the user confirms their PIN. if ( paController . isPinSecurityEnabled ()) { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } else { // If PIN Security is DISABLED, we want to require a click so it doesn't // just execute something automatically when the screen is created. binding . buttonControllerConfirmPinEx2 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_confirm_pin_example_2 ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) binding . buttonControllerConfirmPinEx2 . setOnClickListener { // Make request to confirm PIN for this given request key. paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_2 ) } } }) Parameters \u00b6 requestKey - String","title":"Request pin confirmation to proceed"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/request-pin-confirmation-to-proceed/#requestpinconfirmationtoproceed","text":"fun requestPinConfirmationToProceed(requestKey: String ): Unit (source) To be used after registering the requestKey via Controller.registerPinConfirmationToProceedRequestKey . This will launch PinAuthenticationActivity in PAPinEntryState.CONFIRM_PIN configuration. If the requestKey is not registered, it does nothing. // This button modifies itself based on the status of PIN confirmation for the // particular request. // If the user changes their PIN Security setting, all values associated with registered // RequestKeys will be switched to `false` (at the time PIN Security is enabled), or // `true` (at the time PIN Security is disabled). // At time of registering new RequestKeys, their values will be set to opposite of // PIN Security's state. // STEP 1: Register the RequestKey & observe the returned LiveData paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_1 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) binding . buttonControllerConfirmPinEx1 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex1 )) // STEP 3: Reset the value associated with the RequestKey paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_1 ) } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_confirm_pin_example_1 ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) // STEP 2: Request Pin Confirmation To Proceed binding . buttonControllerConfirmPinEx1 . setOnClickListener { paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_1 ) } } }) // STEP 4: Unregister the RequestKey in the Activity's onDestroy(), or a // Fragment's onDestroyView() _after_ the super call. // Alternative implementation of Pin Confirmation To Proceed which will go right // into doing something upon confirmation, or if PIN Security is DISABLED, will // simply require a click to proceed w/o confirming a PIN. paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_2 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) // If Pin Security is ENABLED, we want it to go right into doing something after // the user confirms their PIN. if ( paController . isPinSecurityEnabled ()) { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } else { // If PIN Security is DISABLED, we want to require a click so it doesn't // just execute something automatically when the screen is created. binding . buttonControllerConfirmPinEx2 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_confirm_pin_example_2 ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) binding . buttonControllerConfirmPinEx2 . setOnClickListener { // Make request to confirm PIN for this given request key. paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_2 ) } } })","title":"requestPinConfirmationToProceed"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/request-pin-confirmation-to-proceed/#parameters","text":"requestKey - String","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/reset-pin-confirmation-to-proceed-request-key/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / resetPinConfirmationToProceedRequestKey resetPinConfirmationToProceedRequestKey \u00b6 fun resetPinConfirmationToProceedRequestKey(requestKey: String ): Unit (source) Reset the boolean value associated with the requestKey to false to proc the observer that is setup on the Controller.registerPinConfirmationToProceedRequestKey method. If the requestKey is not registered or if PinSecurity is DISABLED, it does nothing. // This button modifies itself based on the status of PIN confirmation for the // particular request. // If the user changes their PIN Security setting, all values associated with registered // RequestKeys will be switched to `false` (at the time PIN Security is enabled), or // `true` (at the time PIN Security is disabled). // At time of registering new RequestKeys, their values will be set to opposite of // PIN Security's state. // STEP 1: Register the RequestKey & observe the returned LiveData paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_1 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) binding . buttonControllerConfirmPinEx1 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex1 )) // STEP 3: Reset the value associated with the RequestKey paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_1 ) } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_confirm_pin_example_1 ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) // STEP 2: Request Pin Confirmation To Proceed binding . buttonControllerConfirmPinEx1 . setOnClickListener { paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_1 ) } } }) // STEP 4: Unregister the RequestKey in the Activity's onDestroy(), or a // Fragment's onDestroyView() _after_ the super call. // Alternative implementation of Pin Confirmation To Proceed which will go right // into doing something upon confirmation, or if PIN Security is DISABLED, will // simply require a click to proceed w/o confirming a PIN. paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_2 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) // If Pin Security is ENABLED, we want it to go right into doing something after // the user confirms their PIN. if ( paController . isPinSecurityEnabled ()) { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } else { // If PIN Security is DISABLED, we want to require a click so it doesn't // just execute something automatically when the screen is created. binding . buttonControllerConfirmPinEx2 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_confirm_pin_example_2 ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) binding . buttonControllerConfirmPinEx2 . setOnClickListener { // Make request to confirm PIN for this given request key. paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_2 ) } } }) Parameters \u00b6 requestKey - String","title":"Reset pin confirmation to proceed request key"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/reset-pin-confirmation-to-proceed-request-key/#resetpinconfirmationtoproceedrequestkey","text":"fun resetPinConfirmationToProceedRequestKey(requestKey: String ): Unit (source) Reset the boolean value associated with the requestKey to false to proc the observer that is setup on the Controller.registerPinConfirmationToProceedRequestKey method. If the requestKey is not registered or if PinSecurity is DISABLED, it does nothing. // This button modifies itself based on the status of PIN confirmation for the // particular request. // If the user changes their PIN Security setting, all values associated with registered // RequestKeys will be switched to `false` (at the time PIN Security is enabled), or // `true` (at the time PIN Security is disabled). // At time of registering new RequestKeys, their values will be set to opposite of // PIN Security's state. // STEP 1: Register the RequestKey & observe the returned LiveData paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_1 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) binding . buttonControllerConfirmPinEx1 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex1 )) // STEP 3: Reset the value associated with the RequestKey paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_1 ) } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx1 . text = getString ( R . string . button_controller_confirm_pin_example_1 ) binding . buttonControllerConfirmPinEx1 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) // STEP 2: Request Pin Confirmation To Proceed binding . buttonControllerConfirmPinEx1 . setOnClickListener { paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_1 ) } } }) // STEP 4: Unregister the RequestKey in the Activity's onDestroy(), or a // Fragment's onDestroyView() _after_ the super call. // Alternative implementation of Pin Confirmation To Proceed which will go right // into doing something upon confirmation, or if PIN Security is DISABLED, will // simply require a click to proceed w/o confirming a PIN. paController . registerPinConfirmationToProceedRequestKey ( this , PIN_CONFIRM_REQUEST_KEY_2 ) ?. observe ( viewLifecycleOwner , Observer { if ( it ) { // TRUE: User has confirmed their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_send_something ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . secondaryLightColor )) // If Pin Security is ENABLED, we want it to go right into doing something after // the user confirms their PIN. if ( paController . isPinSecurityEnabled ()) { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } else { // If PIN Security is DISABLED, we want to require a click so it doesn't // just execute something automatically when the screen is created. binding . buttonControllerConfirmPinEx2 . setOnClickListener { doSomething ( getString ( R . string . toast_append_ex2 )) // Reset the value associated with the RequestKey to switch the button // back to `unconfirmed` status. paController . resetPinConfirmationToProceedRequestKey ( PIN_CONFIRM_REQUEST_KEY_2 ) } } } else { // FALSE: User has yet to confirm their PIN // Set button text & tint binding . buttonControllerConfirmPinEx2 . text = getString ( R . string . button_controller_confirm_pin_example_2 ) binding . buttonControllerConfirmPinEx2 . background . setTint ( binding . root . context . getColor ( R . color . button_gray )) binding . buttonControllerConfirmPinEx2 . setOnClickListener { // Make request to confirm PIN for this given request key. paController . requestPinConfirmationToProceed ( PIN_CONFIRM_REQUEST_KEY_2 ) } } })","title":"resetPinConfirmationToProceedRequestKey"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/reset-pin-confirmation-to-proceed-request-key/#parameters","text":"requestKey - String","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/unregister-pin-confirmation-to-proceed-request-key/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Controller / unregisterPinConfirmationToProceedRequestKey unregisterPinConfirmationToProceedRequestKey \u00b6 fun unregisterPinConfirmationToProceedRequestKey(requestKey: String ): Unit (source) Remove registered request key. fun unregisterPinConfirmationToProceedRequestKey(requestKeys: Array < String >): Unit (source) Removes the requestKey and LiveData values from the Map contained in ConfirmPinToProceed.mapRequestKeys . To be implemented in an Activity\u2019s onDestroy() or a Fragments onDestroyView(), after the super call. super . onDestroyView () // Method accepts a single string, or an array of strings. paController . unregisterPinConfirmationToProceedRequestKey ( arrayOf ( PIN_CONFIRM_REQUEST_KEY_1 , PIN_CONFIRM_REQUEST_KEY_2 ) ) Parameters \u00b6 requestKey - String OR requestKeys - Array See Also ConfirmPinToProceed.unregisterRequestKey","title":"Unregister pin confirmation to proceed request key"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/unregister-pin-confirmation-to-proceed-request-key/#unregisterpinconfirmationtoproceedrequestkey","text":"fun unregisterPinConfirmationToProceedRequestKey(requestKey: String ): Unit (source) Remove registered request key. fun unregisterPinConfirmationToProceedRequestKey(requestKeys: Array < String >): Unit (source) Removes the requestKey and LiveData values from the Map contained in ConfirmPinToProceed.mapRequestKeys . To be implemented in an Activity\u2019s onDestroy() or a Fragments onDestroyView(), after the super call. super . onDestroyView () // Method accepts a single string, or an array of strings. paController . unregisterPinConfirmationToProceedRequestKey ( arrayOf ( PIN_CONFIRM_REQUEST_KEY_1 , PIN_CONFIRM_REQUEST_KEY_2 ) )","title":"unregisterPinConfirmationToProceedRequestKey"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-controller/unregister-pin-confirmation-to-proceed-request-key/#parameters","text":"requestKey - String OR requestKeys - Array See Also ConfirmPinToProceed.unregisterRequestKey","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings Settings \u00b6 class Settings (source) PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings. Constructors \u00b6 Name Summary <init> PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings. Settings() Functions \u00b6 Name Summary enableHapticFeedback ENABLE/DISABLE haptic feedback on interactions with PinAuthenticationActivity . fun enableHapticFeedback(enable: Boolean ): Unit enablePinSecurity Starts the process for ENABLING/DISABLING pin security. fun enablePinSecurity(enable: Boolean ): Unit enableScrambledPin ENABLE/DISABLE scrambled pin for PinAuthenticationActivity fun enableScrambledPin(enable: Boolean ): Unit isHapticFeedbackEnabled Checks if haptic feedback is enabled. fun isHapticFeedbackEnabled(): Boolean isPinSecurityEnabled Checks if PIN security is enabled. fun isPinSecurityEnabled(): LiveData< Boolean >? isScrambledPinEnabled Checks if scrambled pin is enabled. fun isScrambledPinEnabled(): Boolean resetColorsToApplicationDefaults Will clear currently applied colors and set them back to colors defined in the Application onCreate()\u2019s initialization of PinAuthentication.Builder.OptionsBuilder.setCustomColors , if they were specified. Otherwise it will fall back to PinAuthentication \u2018s default colors. fun resetColorsToApplicationDefaults(): Unit resetPin Launches PinAuthenticationActivity in PAPinEntryState.RESET_PIN configuration for the user to reset their PIN. fun resetPin(): Unit setCustomColors Change the colors of PinAuthenticationActivity on the fly. These settings get saved to PinAuthentication \u2018s SharedPreferences and loaded at startup after custom colors that may have been specified in the Application onCreate()\u2019s PinAuthentication.Builder.OptionsBuilder.setCustomColors . fun setCustomColors(): ColorsBuilder","title":"Settings"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/#settings","text":"class Settings (source) PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings.","title":"Settings"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/#constructors","text":"Name Summary <init> PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings. Settings()","title":"Constructors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/#functions","text":"Name Summary enableHapticFeedback ENABLE/DISABLE haptic feedback on interactions with PinAuthenticationActivity . fun enableHapticFeedback(enable: Boolean ): Unit enablePinSecurity Starts the process for ENABLING/DISABLING pin security. fun enablePinSecurity(enable: Boolean ): Unit enableScrambledPin ENABLE/DISABLE scrambled pin for PinAuthenticationActivity fun enableScrambledPin(enable: Boolean ): Unit isHapticFeedbackEnabled Checks if haptic feedback is enabled. fun isHapticFeedbackEnabled(): Boolean isPinSecurityEnabled Checks if PIN security is enabled. fun isPinSecurityEnabled(): LiveData< Boolean >? isScrambledPinEnabled Checks if scrambled pin is enabled. fun isScrambledPinEnabled(): Boolean resetColorsToApplicationDefaults Will clear currently applied colors and set them back to colors defined in the Application onCreate()\u2019s initialization of PinAuthentication.Builder.OptionsBuilder.setCustomColors , if they were specified. Otherwise it will fall back to PinAuthentication \u2018s default colors. fun resetColorsToApplicationDefaults(): Unit resetPin Launches PinAuthenticationActivity in PAPinEntryState.RESET_PIN configuration for the user to reset their PIN. fun resetPin(): Unit setCustomColors Change the colors of PinAuthenticationActivity on the fly. These settings get saved to PinAuthentication \u2018s SharedPreferences and loaded at startup after custom colors that may have been specified in the Application onCreate()\u2019s PinAuthentication.Builder.OptionsBuilder.setCustomColors . fun setCustomColors(): ColorsBuilder","title":"Functions"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/-init-/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / <init> <init> \u00b6 Settings() PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings.","title":" init "},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/-init-/#init","text":"Settings() PUBLIC methods to be utilized by the Application that\u2019s implementing PinAuthentication for allowing Users the ability to modify various settings.","title":"&lt;init&gt;"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-haptic-feedback/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / enableHapticFeedback enableHapticFeedback \u00b6 fun enableHapticFeedback(enable: Boolean ): Unit (source) ENABLE/DISABLE haptic feedback on interactions with PinAuthenticationActivity . binding . switchSettingsHapticFeedback . setOnCheckedChangeListener { _ , isChecked -> paSettings . enableHapticFeedback ( isChecked ) } Parameters \u00b6 enable - Boolean ( true = ENABLE, false = DISABLE)","title":"Enable haptic feedback"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-haptic-feedback/#enablehapticfeedback","text":"fun enableHapticFeedback(enable: Boolean ): Unit (source) ENABLE/DISABLE haptic feedback on interactions with PinAuthenticationActivity . binding . switchSettingsHapticFeedback . setOnCheckedChangeListener { _ , isChecked -> paSettings . enableHapticFeedback ( isChecked ) }","title":"enableHapticFeedback"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-haptic-feedback/#parameters","text":"enable - Boolean ( true = ENABLE, false = DISABLE)","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-pin-security/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / enablePinSecurity enablePinSecurity \u00b6 fun enablePinSecurity(enable: Boolean ): Unit (source) Starts the process for ENABLING/DISABLING pin security. Going from: DISABLED -> ENABLED: Will prompt the user to set a pin. ENABLED -> DISABLED: Will prompt the user to confirm their pin. binding . switchSettingsPinSecurity . setOnClickListener { paSettings . enablePinSecurity ( binding . switchSettingsPinSecurity . isChecked ) } Parameters \u00b6 enable - Boolean ( true = ENABLE, false = DISABLE) See Also PinSecurity","title":"Enable pin security"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-pin-security/#enablepinsecurity","text":"fun enablePinSecurity(enable: Boolean ): Unit (source) Starts the process for ENABLING/DISABLING pin security. Going from: DISABLED -> ENABLED: Will prompt the user to set a pin. ENABLED -> DISABLED: Will prompt the user to confirm their pin. binding . switchSettingsPinSecurity . setOnClickListener { paSettings . enablePinSecurity ( binding . switchSettingsPinSecurity . isChecked ) }","title":"enablePinSecurity"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-pin-security/#parameters","text":"enable - Boolean ( true = ENABLE, false = DISABLE) See Also PinSecurity","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-scrambled-pin/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / enableScrambledPin enableScrambledPin \u00b6 fun enableScrambledPin(enable: Boolean ): Unit (source) ENABLE/DISABLE scrambled pin for PinAuthenticationActivity binding . switchSettingsScrambledPin . setOnCheckedChangeListener { _ , isChecked -> paSettings . enableScrambledPin ( isChecked ) } Parameters \u00b6 enable - Boolean ( true = ENABLE, false = DISABLE)","title":"Enable scrambled pin"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-scrambled-pin/#enablescrambledpin","text":"fun enableScrambledPin(enable: Boolean ): Unit (source) ENABLE/DISABLE scrambled pin for PinAuthenticationActivity binding . switchSettingsScrambledPin . setOnCheckedChangeListener { _ , isChecked -> paSettings . enableScrambledPin ( isChecked ) }","title":"enableScrambledPin"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/enable-scrambled-pin/#parameters","text":"enable - Boolean ( true = ENABLE, false = DISABLE)","title":"Parameters"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/is-haptic-feedback-enabled/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / isHapticFeedbackEnabled isHapticFeedbackEnabled \u00b6 fun isHapticFeedbackEnabled(): Boolean (source) Checks if haptic feedback is enabled. binding . switchSettingsHapticFeedback . isChecked = paSettings . isHapticFeedbackEnabled () Return Boolean","title":"Is haptic feedback enabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/is-haptic-feedback-enabled/#ishapticfeedbackenabled","text":"fun isHapticFeedbackEnabled(): Boolean (source) Checks if haptic feedback is enabled. binding . switchSettingsHapticFeedback . isChecked = paSettings . isHapticFeedbackEnabled () Return Boolean","title":"isHapticFeedbackEnabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/is-pin-security-enabled/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / isPinSecurityEnabled isPinSecurityEnabled \u00b6 fun isPinSecurityEnabled(): LiveData< Boolean >? (source) Checks if PIN security is enabled. paSettings . isPinSecurityEnabled () ?. observe ( viewLifecycleOwner , Observer { if ( it != null ) { binding . switchSettingsPinSecurity . isChecked = it binding . buttonSettingsPinReset . isEnabled = it } }) Return LiveData?","title":"Is pin security enabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/is-pin-security-enabled/#ispinsecurityenabled","text":"fun isPinSecurityEnabled(): LiveData< Boolean >? (source) Checks if PIN security is enabled. paSettings . isPinSecurityEnabled () ?. observe ( viewLifecycleOwner , Observer { if ( it != null ) { binding . switchSettingsPinSecurity . isChecked = it binding . buttonSettingsPinReset . isEnabled = it } }) Return LiveData?","title":"isPinSecurityEnabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/is-scrambled-pin-enabled/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / isScrambledPinEnabled isScrambledPinEnabled \u00b6 fun isScrambledPinEnabled(): Boolean (source) Checks if scrambled pin is enabled. binding . switchSettingsScrambledPin . isChecked = paSettings . isScrambledPinEnabled () Return Boolean","title":"Is scrambled pin enabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/is-scrambled-pin-enabled/#isscrambledpinenabled","text":"fun isScrambledPinEnabled(): Boolean (source) Checks if scrambled pin is enabled. binding . switchSettingsScrambledPin . isChecked = paSettings . isScrambledPinEnabled () Return Boolean","title":"isScrambledPinEnabled"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/reset-colors-to-application-defaults/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / resetColorsToApplicationDefaults resetColorsToApplicationDefaults \u00b6 fun resetColorsToApplicationDefaults(): Unit (source) Will clear currently applied colors and set them back to colors defined in the Application onCreate()\u2019s initialization of PinAuthentication.Builder.OptionsBuilder.setCustomColors , if they were specified. Otherwise it will fall back to PinAuthentication \u2018s default colors. binding . buttonSettingsResetColors . setOnClickListener { paSettings . resetColorsToApplicationDefaults () App . showToast ( getString ( R . string . toast_reset_colors )) } See Also ViewColors.resetColorsToApplicationDefaults","title":"Reset colors to application defaults"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/reset-colors-to-application-defaults/#resetcolorstoapplicationdefaults","text":"fun resetColorsToApplicationDefaults(): Unit (source) Will clear currently applied colors and set them back to colors defined in the Application onCreate()\u2019s initialization of PinAuthentication.Builder.OptionsBuilder.setCustomColors , if they were specified. Otherwise it will fall back to PinAuthentication \u2018s default colors. binding . buttonSettingsResetColors . setOnClickListener { paSettings . resetColorsToApplicationDefaults () App . showToast ( getString ( R . string . toast_reset_colors )) } See Also ViewColors.resetColorsToApplicationDefaults","title":"resetColorsToApplicationDefaults"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/reset-pin/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / resetPin resetPin \u00b6 fun resetPin(): Unit (source) Launches PinAuthenticationActivity in PAPinEntryState.RESET_PIN configuration for the user to reset their PIN. binding . buttonSettingsPinReset . setOnClickListener { paSettings . resetPin () } See Also AppLockObserver.hijackApp","title":"Reset pin"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/reset-pin/#resetpin","text":"fun resetPin(): Unit (source) Launches PinAuthenticationActivity in PAPinEntryState.RESET_PIN configuration for the user to reset their PIN. binding . buttonSettingsPinReset . setOnClickListener { paSettings . resetPin () } See Also AppLockObserver.hijackApp","title":"resetPin"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/set-custom-colors/","text":"pin-authentication / io.matthewnelson.pin_authentication.service / PinAuthentication / Settings / setCustomColors setCustomColors \u00b6 fun setCustomColors(): ColorsBuilder (source) Change the colors of PinAuthenticationActivity on the fly. These settings get saved to PinAuthentication \u2018s SharedPreferences and loaded at startup after custom colors that may have been specified in the Application onCreate()\u2019s PinAuthentication.Builder.OptionsBuilder.setCustomColors . binding . buttonSettingsSetCustomColors . setOnClickListener { paSettings . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . applyColors () App . showToast ( getString ( R . string . toast_set_custom_colors )) } Return Builder.ColorsBuilder","title":"Set custom colors"},{"location":"pin-authentication/io.matthewnelson.pin_authentication.service/-pin-authentication/-settings/set-custom-colors/#setcustomcolors","text":"fun setCustomColors(): ColorsBuilder (source) Change the colors of PinAuthenticationActivity on the fly. These settings get saved to PinAuthentication \u2018s SharedPreferences and loaded at startup after custom colors that may have been specified in the Application onCreate()\u2019s PinAuthentication.Builder.OptionsBuilder.setCustomColors . binding . buttonSettingsSetCustomColors . setOnClickListener { paSettings . setCustomColors () . set2_ConfirmButtonBackgroundColor ( R . color . pa_super_green ) . set4_PinHintContainerColor ( R . color . pa_sea_blue ) . set6_PinPadButtonBackgroundColor ( R . color . pa_sea_blue ) . set8_ScreenBackgroundColor ( R . color . pa_deep_sea_blue ) . applyColors () App . showToast ( getString ( R . string . toast_set_custom_colors )) } Return Builder.ColorsBuilder","title":"setCustomColors"}]}